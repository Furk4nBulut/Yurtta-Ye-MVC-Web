import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:yurttaye_mobile/utils/constants.dart';

class AppTheme {
  static ThemeData get lightTheme => ThemeData(
    useMaterial3: true,
    primaryColor: Constants.kykPrimary,
    colorScheme: ColorScheme.fromSeed(
      seedColor: Constants.kykPrimary,
      brightness: Brightness.light,
      primary: Constants.kykPrimary,
      secondary: Constants.kykSecondary,
      tertiary: Constants.kykAccent,
      surface: Constants.white,
      background: Constants.kykGray50,
      error: Constants.kykError,
      onPrimary: Constants.white,
      onSecondary: Constants.white,
      onSurface: Constants.kykGray800,
      onBackground: Constants.kykGray800,
    ),
    scaffoldBackgroundColor: Constants.kykGray50,
    textTheme: GoogleFonts.interTextTheme(
      TextTheme(
        displayLarge: TextStyle(
          fontSize: Constants.text2xl,
          fontWeight: FontWeight.w700,
          color: Constants.kykGray800,
          letterSpacing: -0.5,
        ),
        displayMedium: TextStyle(
          fontSize: Constants.textXl,
          fontWeight: FontWeight.w600,
          color: Constants.kykGray800,
          letterSpacing: -0.25,
        ),
        displaySmall: TextStyle(
          fontSize: Constants.textLg,
          fontWeight: FontWeight.w600,
          color: Constants.kykGray800,
        ),
        headlineLarge: TextStyle(
          fontSize: Constants.textLg,
          fontWeight: FontWeight.w600,
          color: Constants.kykPrimary,
        ),
        headlineMedium: TextStyle(
          fontSize: Constants.textBase,
          fontWeight: FontWeight.w600,
          color: Constants.kykPrimary,
        ),
        bodyLarge: TextStyle(
          fontSize: Constants.textBase,
          color: Constants.kykGray800,
          height: 1.5,
        ),
        bodyMedium: TextStyle(
          fontSize: Constants.textSm,
          color: Constants.kykGray600,
          height: 1.4,
        ),
        bodySmall: TextStyle(
          fontSize: Constants.textXs,
          color: Constants.kykGray500,
          height: 1.3,
        ),
        labelLarge: TextStyle(
          fontSize: Constants.textSm,
          fontWeight: FontWeight.w500,
          color: Constants.kykPrimary,
        ),
      ),
    ),
    cardTheme: CardThemeData(
      elevation: 2,
      color: Constants.white,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(
          color: Constants.kykGray200,
          width: 1,
        ),
      ),
      clipBehavior: Clip.antiAlias,
      margin: const EdgeInsets.symmetric(
        vertical: Constants.space2,
        horizontal: Constants.space4,
      ),
      shadowColor: Constants.kykGray400.withOpacity(0.1),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: Constants.kykPrimary,
        foregroundColor: Constants.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        padding: const EdgeInsets.symmetric(
          horizontal: Constants.space4,
          vertical: Constants.space3,
        ),
        textStyle: GoogleFonts.inter(
          fontSize: Constants.textBase,
          fontWeight: FontWeight.w600,
        ),
        elevation: 2,
        shadowColor: Constants.kykPrimary.withOpacity(0.25),
      ),
    ),
    outlinedButtonTheme: OutlinedButtonThemeData(
      style: OutlinedButton.styleFrom(
        foregroundColor: Constants.kykPrimary,
        side: BorderSide(color: Constants.kykPrimary, width: 1.5),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        padding: const EdgeInsets.symmetric(
          horizontal: Constants.space4,
          vertical: Constants.space3,
        ),
        textStyle: GoogleFonts.inter(
          fontSize: Constants.textBase,
          fontWeight: FontWeight.w600,
        ),
      ),
    ),
    chipTheme: ChipThemeData(
      backgroundColor: Constants.kykGray100,
      selectedColor: Constants.kykAccent,
      checkmarkColor: Constants.white,
      labelStyle: GoogleFonts.inter(
        fontSize: Constants.textSm,
        color: Constants.kykGray800,
        fontWeight: FontWeight.w500,
      ),
      padding: const EdgeInsets.symmetric(
        horizontal: Constants.space3,
        vertical: Constants.space2,
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
        side: BorderSide(color: Constants.kykGray200),
      ),
      elevation: 1,
      pressElevation: 2,
    ),
    appBarTheme: AppBarTheme(
      backgroundColor: Constants.kykPrimary,
      foregroundColor: Constants.white,
      elevation: 0,
      titleTextStyle: GoogleFonts.inter(
        fontSize: Constants.textXl,
        fontWeight: FontWeight.w600,
        color: Constants.white,
        letterSpacing: -0.25,
      ),
      iconTheme: const IconThemeData(
        color: Constants.white,
        size: Constants.textXl,
      ),
      centerTitle: true,
      surfaceTintColor: Colors.transparent,
    ),
    bottomNavigationBarTheme: BottomNavigationBarThemeData(
      backgroundColor: Constants.white,
      selectedItemColor: Constants.kykPrimary,
      unselectedItemColor: Constants.kykGray400,
      selectedLabelStyle: GoogleFonts.inter(
        fontSize: Constants.textXs,
        fontWeight: FontWeight.w600,
      ),
      unselectedLabelStyle: GoogleFonts.inter(
        fontSize: Constants.textXs,
        fontWeight: FontWeight.w500,
      ),
      showUnselectedLabels: true,
      elevation: 8,
      type: BottomNavigationBarType.fixed,
    ),
    iconTheme: IconThemeData(
      color: Constants.kykGray600,
      size: Constants.textBase,
    ),
    dividerTheme: DividerThemeData(
      color: Constants.kykGray200,
      thickness: 1,
      space: 1,
    ),
    pageTransitionsTheme: const PageTransitionsTheme(
      builders: {
        TargetPlatform.android: CupertinoPageTransitionsBuilder(),
        TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
      },
    ),
  );

  static ThemeData get darkTheme => ThemeData(
    useMaterial3: true,
    primaryColor: Constants.kykSecondary,
    colorScheme: ColorScheme.fromSeed(
      seedColor: Constants.kykSecondary,
      brightness: Brightness.dark,
      primary: Constants.kykSecondary,
      secondary: Constants.kykAccent,
      tertiary: Constants.kykSuccess,
      surface: Constants.darkSurface,
      background: Constants.darkBackground,
      error: Constants.kykError,
      onPrimary: Constants.white,
      onSecondary: Constants.darkBackground,
      onSurface: Constants.darkTextPrimary,
      onBackground: Constants.darkTextPrimary,
    ),
    scaffoldBackgroundColor: Constants.darkBackground,
    textTheme: GoogleFonts.interTextTheme(
      TextTheme(
        displayLarge: TextStyle(
          fontSize: Constants.text2xl,
          fontWeight: FontWeight.w700,
          color: Constants.white,
          letterSpacing: -0.5,
        ),
        displayMedium: TextStyle(
          fontSize: Constants.textXl,
          fontWeight: FontWeight.w600,
          color: Constants.white,
          letterSpacing: -0.25,
        ),
        displaySmall: TextStyle(
          fontSize: Constants.textLg,
          fontWeight: FontWeight.w600,
          color: Constants.white,
        ),
        headlineLarge: TextStyle(
          fontSize: Constants.textLg,
          fontWeight: FontWeight.w600,
          color: Constants.kykSecondary,
        ),
        headlineMedium: TextStyle(
          fontSize: Constants.textBase,
          fontWeight: FontWeight.w600,
          color: Constants.kykSecondary,
        ),
        bodyLarge: TextStyle(
          fontSize: Constants.textBase,
          color: Constants.white,
          height: 1.5,
        ),
        bodyMedium: TextStyle(
          fontSize: Constants.textSm,
          color: Constants.darkTextSecondary,
          height: 1.4,
        ),
        bodySmall: TextStyle(
          fontSize: Constants.textXs,
          color: Constants.darkTextTertiary,
          height: 1.3,
        ),
        labelLarge: TextStyle(
          fontSize: Constants.textSm,
          fontWeight: FontWeight.w500,
          color: Constants.kykSecondary,
        ),
      ),
    ),
    cardTheme: CardThemeData(
      elevation: 4,
      color: Constants.darkCard,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
        side: BorderSide(
          color: Constants.darkBorder,
          width: 1,
        ),
      ),
      clipBehavior: Clip.antiAlias,
      margin: const EdgeInsets.symmetric(
        vertical: Constants.space2,
        horizontal: Constants.space4,
      ),
      shadowColor: Constants.black.withOpacity(0.3),
    ),
    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: Constants.kykSecondary,
        foregroundColor: Constants.white,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        padding: const EdgeInsets.symmetric(
          horizontal: Constants.space4,
          vertical: Constants.space3,
        ),
        textStyle: GoogleFonts.inter(
          fontSize: Constants.textBase,
          fontWeight: FontWeight.w600,
        ),
        elevation: 4,
        shadowColor: Constants.kykSecondary.withOpacity(0.4),
      ),
    ),
    outlinedButtonTheme: OutlinedButtonThemeData(
      style: OutlinedButton.styleFrom(
        foregroundColor: Constants.kykSecondary,
        side: BorderSide(color: Constants.kykSecondary, width: 1.5),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        padding: const EdgeInsets.symmetric(
          horizontal: Constants.space4,
          vertical: Constants.space3,
        ),
        textStyle: GoogleFonts.inter(
          fontSize: Constants.textBase,
          fontWeight: FontWeight.w600,
        ),
      ),
    ),
    chipTheme: ChipThemeData(
      backgroundColor: Constants.darkGray,
      selectedColor: Constants.kykAccent,
      checkmarkColor: Constants.white,
      labelStyle: GoogleFonts.inter(
        fontSize: Constants.textSm,
        color: Constants.darkTextPrimary,
        fontWeight: FontWeight.w500,
      ),
      padding: const EdgeInsets.symmetric(
        horizontal: Constants.space3,
        vertical: Constants.space2,
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(20),
        side: BorderSide(color: Constants.darkBorder),
      ),
      elevation: 2,
      pressElevation: 4,
    ),
    appBarTheme: AppBarTheme(
      backgroundColor: Constants.darkSurface,
      foregroundColor: Constants.darkTextPrimary,
      elevation: 0,
      titleTextStyle: GoogleFonts.inter(
        fontSize: Constants.textXl,
        fontWeight: FontWeight.w600,
        color: Constants.darkTextPrimary,
        letterSpacing: -0.25,
      ),
      iconTheme: const IconThemeData(
        color: Constants.darkTextPrimary,
        size: Constants.textXl,
      ),
      centerTitle: true,
      surfaceTintColor: Colors.transparent,
    ),
    bottomNavigationBarTheme: BottomNavigationBarThemeData(
      backgroundColor: Constants.darkSurface,
      selectedItemColor: Constants.kykSecondary,
      unselectedItemColor: Constants.darkTextTertiary,
      selectedLabelStyle: GoogleFonts.inter(
        fontSize: Constants.textXs,
        fontWeight: FontWeight.w600,
      ),
      unselectedLabelStyle: GoogleFonts.inter(
        fontSize: Constants.textXs,
        fontWeight: FontWeight.w500,
      ),
      showUnselectedLabels: true,
      elevation: 8,
      type: BottomNavigationBarType.fixed,
    ),
    iconTheme: IconThemeData(
      color: Constants.darkTextSecondary,
      size: Constants.textBase,
    ),
    dividerTheme: DividerThemeData(
      color: Constants.darkDivider,
      thickness: 1,
      space: 1,
    ),
    pageTransitionsTheme: const PageTransitionsTheme(
      builders: {
        TargetPlatform.android: CupertinoPageTransitionsBuilder(),
        TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
      },
    ),
  );

  // Theme-aware custom styles
  static TextStyle mealTitleStyle(BuildContext context) => GoogleFonts.poppins(
    fontSize: Constants.text2xl,
    fontWeight: FontWeight.w700,
    color: Constants.white, // White for gradient background
  );

  static TextStyle mealSubtitleStyle(BuildContext context) => GoogleFonts.poppins(
    fontSize: Constants.textBase,
    fontWeight: FontWeight.w400,
    color: Constants.white.withOpacity(0.9),
  );

  static TextStyle categoryTitleStyle(BuildContext context) => GoogleFonts.poppins(
    fontSize: Constants.textLg,
    fontWeight: FontWeight.w600,
    color: Theme.of(context).brightness == Brightness.dark
        ? Constants.kykYellow400
        : Constants.kykBlue600,
  );

  static BoxDecoration gradientDecoration(BuildContext context) => BoxDecoration(
    gradient: LinearGradient(
      colors: [Constants.kykBlue600, const Color(0xFF0D9488)], // Blue to teal
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
    ),
    borderRadius: BorderRadius.zero, // Square corners
  );

  static BoxDecoration cardHoverDecoration(BuildContext context) => BoxDecoration(
    borderRadius: BorderRadius.zero, // Square corners
    boxShadow: [
      BoxShadow(
        color: Constants.kykYellow400.withOpacity(
          Theme.of(context).brightness == Brightness.dark ? 0.35 : 0.25,
        ),
        blurRadius: 10,
        offset: const Offset(0, 4),
      ),
    ],
  );

  // Yemek türüne özel gradient'ler
  static BoxDecoration getMealTypeGradient(String mealType, {bool isDark = false}) {
    switch (mealType.toLowerCase()) {
      case Constants.breakfastType:
        return BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Constants.breakfastGradientStart,
              Constants.breakfastGradientEnd,
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        );
      case Constants.lunchType:
        return BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Constants.lunchGradientStart,
              Constants.lunchGradientEnd,
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        );
      case Constants.dinnerType:
        return BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Constants.dinnerGradientStart,
              Constants.dinnerGradientEnd,
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        );
      default:
        return BoxDecoration(
          gradient: LinearGradient(
            colors: [
              Constants.kykBlue600,
              const Color(0xFF0D9488),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        );
    }
  }

  // Yemek türüne özel sadece Gradient döndüren fonksiyon
  static LinearGradient getMealTypeLinearGradient(String mealType) {
    switch (mealType.toLowerCase()) {
      case Constants.breakfastType:
        return LinearGradient(
          colors: [
            Constants.breakfastGradientStart,
            Constants.breakfastGradientEnd,
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        );
      case Constants.lunchType:
        return LinearGradient(
          colors: [
            Constants.lunchGradientStart,
            Constants.lunchGradientEnd,
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        );
      case Constants.dinnerType:
        return LinearGradient(
          colors: [
            Constants.dinnerGradientStart,
            Constants.dinnerGradientEnd,
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        );
      default:
        return LinearGradient(
          colors: [
            Constants.kykBlue600,
            const Color(0xFF0D9488),
          ],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        );
    }
  }

  // Yemek türüne özel renkler
  static Color getMealTypePrimaryColor(String mealType) {
    switch (mealType.toLowerCase()) {
      case Constants.breakfastType:
        return Constants.breakfastPrimary;
      case Constants.lunchType:
        return Constants.lunchPrimary;
      case Constants.dinnerType:
        return Constants.dinnerPrimary;
      default:
        return Constants.kykPrimary;
    }
  }

  static Color getMealTypeSecondaryColor(String mealType) {
    switch (mealType.toLowerCase()) {
      case Constants.breakfastType:
        return Constants.breakfastSecondary;
      case Constants.lunchType:
        return Constants.lunchSecondary;
      case Constants.dinnerType:
        return Constants.dinnerSecondary;
      default:
        return Constants.kykSecondary;
    }
  }

  static Color getMealTypeAccentColor(String mealType) {
    switch (mealType.toLowerCase()) {
      case Constants.breakfastType:
        return Constants.breakfastAccent;
      case Constants.lunchType:
        return Constants.lunchAccent;
      case Constants.dinnerType:
        return Constants.dinnerAccent;
      default:
        return Constants.kykAccent;
    }
  }

  // Yemek türüne özel metin stilleri
  static TextStyle getMealTypeTitleStyle(String mealType, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    return GoogleFonts.poppins(
      fontSize: Constants.text2xl,
      fontWeight: FontWeight.w700,
      color: Constants.white,
      shadows: [
        Shadow(
          offset: const Offset(0, 2),
          blurRadius: 4,
          color: Colors.black.withOpacity(0.3),
        ),
      ],
    );
  }

  static TextStyle getMealTypeSubtitleStyle(String mealType, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    return GoogleFonts.poppins(
      fontSize: Constants.textBase,
      fontWeight: FontWeight.w400,
      color: Constants.white.withOpacity(0.9),
      shadows: [
        Shadow(
          offset: const Offset(0, 1),
          blurRadius: 2,
          color: Colors.black.withOpacity(0.2),
        ),
      ],
    );
  }

  // Yemek türüne özel kart dekorasyonu
  static BoxDecoration getMealTypeCardDecoration(String mealType, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    final baseDecoration = getMealTypeGradient(mealType, isDark: isDark);
    
    return baseDecoration.copyWith(
      boxShadow: [
        BoxShadow(
          color: getMealTypePrimaryColor(mealType).withOpacity(isDark ? 0.4 : 0.3),
          blurRadius: 12,
          offset: const Offset(0, 6),
        ),
      ],
    );
  }

  // Yemek türüne özel chip dekorasyonu
  static BoxDecoration getMealTypeChipDecoration(String mealType, BuildContext context) {
    final isDark = Theme.of(context).brightness == Brightness.dark;
    return BoxDecoration(
      color: getMealTypePrimaryColor(mealType).withOpacity(isDark ? 0.2 : 0.1),
      border: Border.all(
        color: getMealTypePrimaryColor(mealType).withOpacity(0.3),
        width: 1,
      ),
      borderRadius: BorderRadius.circular(20),
    );
  }

  // Yemek türüne özel chip metin stili
  static TextStyle getMealTypeChipTextStyle(String mealType, BuildContext context) {
    return GoogleFonts.inter(
      fontSize: Constants.textSm,
      fontWeight: FontWeight.w600,
      color: getMealTypePrimaryColor(mealType),
    );
  }
}import 'dart:ui';

class Constants {
  static const String apiUrl = 'https://yurttaye.onrender.com/Api';

  // KYK Kurumsal Renk Paleti
  static const Color kykPrimary = Color(0xFF1E3A8A);      // Koyu mavi - Ana renk
  static const Color kykSecondary = Color(0xFF3B82F6);    // Mavi - İkincil renk
  static const Color kykAccent = Color(0xFFF59E0B);       // Turuncu - Vurgu rengi
  static const Color kykSuccess = Color(0xFF10B981);      // Yeşil - Başarı
  static const Color kykWarning = Color(0xFFF59E0B);      // Turuncu - Uyarı
  static const Color kykError = Color(0xFFEF4444);        // Kırmızı - Hata
  
  // Nötr Renkler - Aydınlık Tema
  static const Color kykGray50 = Color(0xFFF8FAFC);       // Çok açık gri
  static const Color kykGray100 = Color(0xFFF1F5F9);      // Açık gri
  static const Color kykGray200 = Color(0xFFE2E8F0);      // Orta açık gri
  static const Color kykGray300 = Color(0xFFCBD5E1);      // Orta gri
  static const Color kykGray400 = Color(0xFF94A3B8);      // Orta koyu gri
  static const Color kykGray500 = Color(0xFF64748B);      // Koyu gri
  static const Color kykGray600 = Color(0xFF475569);      // Daha koyu gri
  static const Color kykGray700 = Color(0xFF334155);      // Çok koyu gri
  static const Color kykGray800 = Color(0xFF1E293B);      // En koyu gri
  static const Color kykGray900 = Color(0xFF0F172A);      // Siyaha yakın
  
  // Karanlık Tema İçin Özel Renkler - Daha Yumuşak ve Modern
  static const Color darkBackground = Color(0xFF0A0A0A);      // Çok koyu arka plan
  static const Color darkSurface = Color(0xFF1A1A1A);         // Koyu yüzey
  static const Color darkCard = Color(0xFF2A2A2A);            // Koyu kart
  static const Color darkBorder = Color(0xFF3A3A3A);          // Koyu kenarlık
  static const Color darkTextPrimary = Color(0xFFF5F5F5);     // Ana metin rengi
  static const Color darkTextSecondary = Color(0xFFB0B0B0);   // İkincil metin rengi
  static const Color darkTextTertiary = Color(0xFF808080);    // Üçüncül metin rengi
  static const Color darkDivider = Color(0xFF404040);         // Ayırıcı çizgi
  static const Color darkHover = Color(0xFF353535);           // Hover durumu
  static const Color darkActive = Color(0xFF404040);          // Aktif durum
  
  // Karanlık Tema İçin Yumuşak Renkler
  static const Color darkBlue = Color(0xFF1E293B);            // Yumuşak koyu mavi
  static const Color darkBlueLight = Color(0xFF334155);       // Açık koyu mavi
  static const Color darkBlueLighter = Color(0xFF475569);     // Daha açık koyu mavi
  static const Color darkGray = Color(0xFF374151);            // Yumuşak koyu gri
  static const Color darkGrayLight = Color(0xFF4B5563);       // Açık koyu gri
  static const Color darkGrayLighter = Color(0xFF6B7280);     // Daha açık koyu gri
  
  // Beyaz ve Şeffaflık
  static const Color white = Color(0xFFFFFFFF);
  static const Color black = Color(0xFF000000);
  
  // Yemek Temalı Renkler
  static const Color foodWarm = Color(0xFFFF6B35);        // Sıcak yemek rengi
  static const Color foodFresh = Color(0xFF4ADE80);       // Taze yeşil
  static const Color foodSweet = Color(0xFFF472B6);       // Tatlı pembe
  static const Color foodSpicy = Color(0xFFDC2626);       // Baharatlı kırmızı

  // Sabah Yemeği Özel Renkleri
  static const Color breakfastPrimary = Color(0xFFFF8A65);    // Sabah turuncu
  static const Color breakfastSecondary = Color(0xFFFFCC02);  // Sabah sarısı
  static const Color breakfastAccent = Color(0xFFFF6F61);     // Sabah mercan
  static const Color breakfastWarm = Color(0xFFFFB74D);       // Sabah sıcak turuncu
  static const Color breakfastLight = Color(0xFFFFE0B2);      // Sabah açık sarı
  static const Color breakfastGradientStart = Color(0xFFFF8A65); // Sabah gradient başlangıç
  static const Color breakfastGradientEnd = Color(0xFFFFCC02);   // Sabah gradient bitiş

  // Akşam Yemeği Özel Renkleri
  static const Color dinnerPrimary = Color(0xFF1E3A8A);       // Eski mavi - Ana renk
  static const Color dinnerSecondary = Color(0xFF3B82F6);     // Eski mavi - İkincil renk
  static const Color dinnerAccent = Color(0xFFF59E0B);        // Turuncu - Vurgu rengi
  static const Color dinnerWarm = Color(0xFF2C4C9E);          // Eski mavi - Sıcak ton
  static const Color dinnerLight = Color(0xFFEFF3FF);         // Eski açık mavi
  static const Color dinnerGradientStart = Color(0xFF1E3A8A); // Eski mavi gradient başlangıç
  static const Color dinnerGradientEnd = Color(0xFF3B82F6);   // Eski mavi gradient bitiş

  // Öğle Yemeği Özel Renkleri
  static const Color lunchPrimary = Color(0xFF4CAF50);        // Öğle yeşil
  static const Color lunchSecondary = Color(0xFF66BB6A);      // Öğle açık yeşil
  static const Color lunchAccent = Color(0xFF2E7D32);         // Öğle koyu yeşil
  static const Color lunchWarm = Color(0xFF81C784);           // Öğle sıcak yeşil
  static const Color lunchLight = Color(0xFFE8F5E8);          // Öğle açık yeşil
  static const Color lunchGradientStart = Color(0xFF4CAF50);  // Öğle gradient başlangıç
  static const Color lunchGradientEnd = Color(0xFF66BB6A);    // Öğle gradient bitiş

  // Eski renkler (geriye uyumluluk için)
  static const Color kykBlue900 = Color(0xFF162A4D);   // Koyu lacivert, derinlik için
  static const Color kykBlue600 = Color(0xFF2C4C9E);   // Canlı orta mavi
  static const Color kykBlue400 = Color(0xFF5A7FE3);   // Parlak orta açık mavi
  static const Color kykBlue200 = Color(0xFFB6CCFF);   // Çok açık gökyüzü mavisi, ferahlatıcı
  static const Color kykOrange400 = Color(0xFF8257E5); // Canlı mor-menekşe tonu
  static const Color kykYellow400 = Color(0xFFE25757); // Soft kırmızı - vurgu ve dikkat için
  static const Color kykGray100_old = Color(0xFFEFF3FF);   // Çok açık buz mavisi
  static const Color gray50 = Color(0xFFF8FAFF);       // Neredeyse beyaz, hafif mavi
  static const Color gray100 = Color(0xFFD7E1FF);      // Açık mavi-gri
  static const Color gray200 = Color(0xFFACBAF7);      // Hafif mavi tonlu gri
  static const Color gray300 = Color(0xFF8399E3);      // Orta mavi-gri
  static const Color gray500 = Color(0xFF516DC0);      // Koyu mavi-gri (metinlerde yumuşak)
  static const Color gray600 = Color(0xFF3E5396);      // Daha koyu mavi-gri (başlık/metin)
  static const Color kykGray700_old = Color(0xFF2B3B70);   // Koyu mavi-gri
  static const Color gray700 = Color(0xFF1A2A54);      // Çok koyu mavi-gri
  static const Color kykRed600 = Color(0xFFB33838);    // Orta koyu kırmızı
  static const Color kykRed400 = Color(0xFFDB5959);    // Parlak kırmızı
  static const Color kykGreen400 = Color(0xFF3EA66B);  // Canlı yeşil

  // Boşluk ve yazı büyüklükleri (değişmedi)
  static const double space1 = 4.0;
  static const double space2 = 8.0;
  static const double space3 = 12.0;
  static const double space4 = 16.0;
  static const double space5 = 20.0;
  static const double space6 = 24.0;
  static const double space8 = 32.0;

  static const double textXs = 12.0;
  static const double textSm = 14.0;
  static const double textBase = 16.0;
  static const double textLg = 18.0;
  static const double textXl = 20.0;
  static const double text2xl = 24.0;
  static const double text3xl = 30.0;

  static const Color gray800 = Color(0xFF0F1F3B);      // Çok koyu mavi
  static const Color gray900 = Color(0xFF0A1525);      // Siyaha yakın koyu mavi

  // Yemek türü sabitleri
  static const String breakfastType = 'breakfast';
  static const String lunchType = 'lunch';
  static const String dinnerType = 'dinner';
}