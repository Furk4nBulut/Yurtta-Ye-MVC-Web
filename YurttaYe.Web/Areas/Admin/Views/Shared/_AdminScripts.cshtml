// Global Functions for Admin Panel

<script>
    // Error Handling
    window.addEventListener('error', (e) => {
        console.error('Admin Panel Error:', e.error);
        window.adminPanel?.showNotification('Bir hata oluştu. Lütfen sayfayı yenileyin.', 'error');
    });

    // Performance Monitoring
    window.addEventListener('load', () => {
        if ('performance' in window) {
            const loadTime = Math.round(performance.now());
            console.log(`Admin Panel loaded in ${loadTime}ms`);
            this.init();
    });

        init() {
            this.setupMobileMenu();
            this.setupSearch();
            this.setupKeyboardShortcuts();
            this.setupNotifications();
            this.setupActiveNavigation();
            this.setupRealTimeClock();
            this.setupPerformanceMonitor();
        }

        // Enhanced Mobile Menu Toggle
        setupMobileMenu() {
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');

            if (mobileMenuButton && sidebar) {
                mobileMenuButton.addEventListener('click', () => {
                    const isHidden = sidebar.classList.contains('-translate-x-full');
                    
                    if (isHidden) {
                        sidebar.classList.remove('-translate-x-full');
                        sidebar.classList.add('translate-x-0');
                        overlay?.classList.remove('hidden');
                        document.body.style.overflow = 'hidden';
                    } else {
                        sidebar.classList.add('-translate-x-full');
                        sidebar.classList.remove('translate-x-0');
                        overlay?.classList.add('hidden');
                        document.body.style.overflow = '';
                    }
                });
            }

            // Close sidebar when clicking overlay
            overlay?.addEventListener('click', () => {
                sidebar?.classList.add('-translate-x-full');
                sidebar?.classList.remove('translate-x-0');
                overlay.classList.add('hidden');
                document.body.style.overflow = '';
            });

            // Close sidebar on escape key
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && !sidebar?.classList.contains('-translate-x-full')) {
                    sidebar?.classList.add('-translate-x-full');
                    overlay?.classList.add('hidden');
                    document.body.style.overflow = '';
                }
            });
        }

        // Enhanced Search Functionality
        setupSearch() {
            const searchInput = document.getElementById('global-search');
            const searchResults = document.getElementById('search-results');
            const searchContent = document.getElementById('search-content');
            let searchTimeout;

            if (!searchInput) return;

            // Search input handler
            searchInput.addEventListener('input', (e) => {
                const query = e.target.value.trim();
                
                clearTimeout(searchTimeout);
                
                if (query.length < 2) {
                    searchResults?.classList.add('hidden');
                    return;
                }

                searchTimeout = setTimeout(() => {
                    this.performSearch(query, searchResults, searchContent);
                }, 300);
            });

            // Hide search results when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('#global-search') && !e.target.closest('#search-results')) {
                    searchResults?.classList.add('hidden');
                }
            });

            // Search focus handler
            searchInput.addEventListener('focus', () => {
                if (searchInput.value.trim().length >= 2) {
                    searchResults?.classList.remove('hidden');
                }
            });
        }

        // Enhanced Search Performer
        async performSearch(query, resultsContainer, contentContainer) {
            if (!resultsContainer || !contentContainer) return;

            // Show loading state
            contentContainer.innerHTML = `
                <div class="flex items-center justify-center py-4">
                    <i class="fas fa-spinner animate-spin text-gray-400 mr-2"></i>
                    <span class="text-gray-500">Aranıyor...</span>
                </div>
            `;
            resultsContainer.classList.remove('hidden');

            try {
                // Simulate API call - replace with actual search endpoint
                await new Promise(resolve => setTimeout(resolve, 500));
                
                // Mock search results
                const mockResults = this.generateMockSearchResults(query);
                
                if (mockResults.length === 0) {
                    contentContainer.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-search text-gray-300 text-2xl mb-2"></i>
                            <p class="text-gray-500 text-sm">Sonuç bulunamadı</p>
                        </div>
                    `;
                } else {
                    contentContainer.innerHTML = mockResults.map(result => `
                        <a href="${result.url}" class="block p-3 hover:bg-gray-50 rounded-lg transition-colors group">
                            <div class="flex items-center space-x-3">
                                <div class="w-8 h-8 bg-${result.color}-100 rounded-lg flex items-center justify-center">
                                    <i class="fas fa-${result.icon} text-${result.color}-600 text-sm"></i>
                                </div>
                                <div class="flex-1">
                                    <div class="font-medium text-gray-900 group-hover:text-blue-600">${result.title}</div>
                                    <div class="text-xs text-gray-500">${result.description}</div>
                                </div>
                            </div>
                        </a>
                    `).join('');
                }
            } catch (error) {
                contentContainer.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-exclamation-triangle text-red-400 text-xl mb-2"></i>
                        <p class="text-red-500 text-sm">Arama sırasında hata oluştu</p>
                    </div>
                `;
            }
        }

        // Generate Mock Search Results
        generateMockSearchResults(query) {
            const allResults = [
                { title: 'Menü Yönetimi', description: 'Tüm menüleri görüntüle ve düzenle', url: '/Admin/AdminMenu', icon: 'utensils', color: 'blue' },
                { title: 'Yeni Menü Ekle', description: 'Yeni menü oluştur', url: '/Admin/AdminMenu/Create', icon: 'plus', color: 'green' },
                { title: 'Şehir Yönetimi', description: 'Şehirleri yönet ve düzenle', url: '/Admin/AdminCity', icon: 'city', color: 'purple' },
                { title: 'Dashboard', description: 'Ana yönetim paneli', url: '/Admin/Home', icon: 'tachometer-alt', color: 'blue' },
                { title: 'İstatistikler', description: 'Sistem raporları ve grafikler', url: '/Admin/Reports', icon: 'chart-bar', color: 'indigo' }
            ];

            return allResults.filter(result => 
                result.title.toLowerCase().includes(query.toLowerCase()) ||
                result.description.toLowerCase().includes(query.toLowerCase())
            ).slice(0, 5);
        }

        // Keyboard Shortcuts
        setupKeyboardShortcuts() {
            document.addEventListener('keydown', (e) => {
                // Ctrl+K for search
                if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                    e.preventDefault();
                    const searchInput = document.getElementById('global-search');
                    searchInput?.focus();
                }

                // Ctrl+/ for help
                if ((e.ctrlKey || e.metaKey) && e.key === '/') {
                    e.preventDefault();
                    this.showKeyboardShortcuts();
                }

                // Ctrl+Shift+N for new menu
                if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'N') {
                    e.preventDefault();
                    window.location.href = '/Admin/AdminMenu/Create';
                }
            });
        }

        // Show Keyboard Shortcuts Modal
        showKeyboardShortcuts() {
            const modal = document.createElement('div');
            modal.className = 'fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center';
            modal.innerHTML = `
                <div class="bg-white rounded-xl p-6 max-w-md w-full mx-4">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-lg font-bold text-gray-900">Klavye Kısayolları</h3>
                        <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="space-y-3 text-sm">
                        <div class="flex justify-between">
                            <span>Arama</span>
                            <kbd class="px-2 py-1 bg-gray-100 rounded">Ctrl + K</kbd>
                        </div>
                        <div class="flex justify-between">
                            <span>Yeni Menü</span>
                            <kbd class="px-2 py-1 bg-gray-100 rounded">Ctrl + Shift + N</kbd>
                        </div>
                        <div class="flex justify-between">
                            <span>Yardım</span>
                            <kbd class="px-2 py-1 bg-gray-100 rounded">Ctrl + /</kbd>
                        </div>
                        <div class="flex justify-between">
                            <span>Menüyü Kapat</span>
                            <kbd class="px-2 py-1 bg-gray-100 rounded">Esc</kbd>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(modal);
        }

        // Notifications System
        setupNotifications() {
            // Check for new notifications periodically
            setInterval(() => {
                this.checkNotifications();
            }, 30000); // Check every 30 seconds
        }

        checkNotifications() {
            // Simulate notification check
            const notificationBadge = document.querySelector('.fas.fa-bell + span');
            if (notificationBadge && Math.random() > 0.8) {
                const currentCount = parseInt(notificationBadge.textContent) || 0;
                notificationBadge.textContent = currentCount + 1;
            }
        }

        // Active Navigation Highlighting
        setupActiveNavigation() {
            const currentPath = window.location.pathname;
            const navLinks = document.querySelectorAll('.nav-link');
            
            navLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href && currentPath.includes(href)) {
                    link.classList.add('active');
                }
            });
        }

        // Real-time Clock
        setupRealTimeClock() {
            const clockElement = document.getElementById('current-time');
            if (!clockElement) return;

            const updateClock = () => {
                const now = new Date();
                const timeString = now.toLocaleDateString('tr-TR', {
                    day: '2-digit',
                    month: 'long',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                clockElement.textContent = timeString;
            };

            updateClock();
            setInterval(updateClock, 60000); // Update every minute
        }

        // Performance Monitor
        setupPerformanceMonitor() {
            // Monitor page load time
            window.addEventListener('load', () => {
                const loadTime = performance.now();
                console.log(`Page loaded in ${Math.round(loadTime)}ms`);
                
                // Update performance indicator if exists
                const perfBar = document.querySelector('.bg-gradient-to-r.from-green-500');
                if (perfBar && loadTime > 2000) {
                    perfBar.className = perfBar.className.replace('from-green-500', 'from-yellow-500');
                }
            });
        }

        // Real-time Updates
        startRealTimeUpdates() {
            setInterval(() => {
                this.updateSystemStatus();
                this.updateStatistics();
            }, 30000);
        }

        updateSystemStatus() {
            // Update last backup time
            const lastBackupEl = document.getElementById('last-backup');
            if (lastBackupEl) {
                const now = new Date();
                lastBackupEl.textContent = now.toLocaleTimeString('tr-TR', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
            }

            // Update last update time
            const lastUpdateEl = document.getElementById('last-update');
            if (lastUpdateEl) {
                const now = new Date();
                lastUpdateEl.textContent = now.toLocaleDateString('tr-TR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
        }

        updateStatistics() {
            // Simulate statistics updates
            const menuCountEl = document.getElementById('footer-menu-count');
            const cityCountEl = document.getElementById('footer-city-count');
            
            if (menuCountEl && Math.random() > 0.9) {
                const current = parseInt(menuCountEl.textContent) || 0;
                menuCountEl.textContent = current + 1;
                this.showNotification('Yeni menü eklendi!', 'success');
            }
        }

        // Utility: Show Notification
        showNotification(message, type = 'info', duration = 3000) {
            const colors = {
                success: 'bg-green-500',
                error: 'bg-red-500',
                warning: 'bg-yellow-500',
                info: 'bg-blue-500'
            };

            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 ${colors[type]} text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300`;
            notification.innerHTML = `
                <div class="flex items-center">
                    <i class="fas fa-${type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : type === 'warning' ? 'exclamation' : 'info-circle'} mr-2"></i>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            // Animate in
            setTimeout(() => {
                notification.classList.remove('translate-x-full');
            }, 100);

            // Auto remove
            setTimeout(() => {
                notification.classList.add('translate-x-full');
                setTimeout(() => notification.remove(), 300);
            }, duration);
        }
    }

    // Initialize Enhanced Admin Panel
    document.addEventListener('DOMContentLoaded', () => {
        window.adminPanel = new EnhancedAdminPanel();
    });

            window.adminPanel.showNotification(message, type);
        }
    };

    window.confirmAdminDelete = (message) => {
        if (window.adminPanel) {
            return window.adminPanel.confirmDelete(message);
        }
        return confirm('Silmek istediğinizden emin misiniz?');
    };
</script>
