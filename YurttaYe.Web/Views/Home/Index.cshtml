@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@model YurttaYe.Core.Models.ViewModels.MenuViewModel
@using YurttaYe.Core.Models.ViewModels
@using System.Globalization
@{
    ViewData["Title"] = Localizer["QueryMenu"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var currentCulture = Thread.CurrentThread.CurrentUICulture;
}

<div class="min-h-screen">
    <!-- Main content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">

        <!-- Form -->
        <div class="space-y-4">
            @{
                var selectedDate = Model.Date;
                var firstDayOfMonth = new DateTime(selectedDate.Year, selectedDate.Month, 1);
                var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
                var datesToShow = Enumerable.Range(0, lastDayOfMonth.Day)
                    .Select(i => firstDayOfMonth.AddDays(i))
                    .ToList();
            }
            <form asp-action="Index" method="post" class="space-y-4" id="menuForm" data-meal-theme="@(Model.MealType == Localizer["Breakfast"].ToString() ? "morning" : "evening")">
                <!-- City Selection -->
                <div>
                    <div x-data="{ open: false }" class="relative">
                        <label for="city-button" class="block text-sm font-medium text-primary mb-2">@Localizer["City"]</label>
                        <button type="button" @@click="open = !open" class="relative block w-full text-left rounded-lg border border-border focus:border-accent focus:ring-accent py-3 px-4 bg-secondary text-primary">
                            <span>
                                @(Model.Cities.FirstOrDefault(c => c.Value == Model.CityId.ToString())?.Text ?? Localizer["SelectCity"].ToString())
                            </span>
                            <i class="fas fa-chevron-down absolute right-4 top-1/2 -translate-y-1/2 text-primary opacity-75"></i>
                        </button>

                        <div x-show="open" @@click.outside="open = false" x-transition class="absolute z-10 mt-1 w-full bg-card rounded-lg shadow-lg border border-border max-h-60 overflow-y-auto" style="display: none;">
                            <ul class="py-1">
                                @foreach (var city in Model.Cities)
                                {
                                    <li>
                                        <a href="#" @@click.prevent="document.getElementById('CityId').value = '@city.Value'; document.getElementById('menuForm').submit();" class="block px-4 py-2 text-primary hover:bg-gray-200 dark:hover:bg-gray-700 @(city.Value == Model.CityId.ToString() ? "bg-accent text-white" : "")">
                                            @city.Text
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                        
                        <select asp-for="CityId" class="hidden" asp-items="@Model.Cities"></select>
                        <span asp-validation-for="CityId" class="text-red-500 text-xs mt-1"></span>
                    </div>
                </div>

                <!-- New Date Picker -->
                <div>
                    <div class="date-selector">
                        <div class="flex items-center justify-between mb-6">
                            <button type="button" id="prevDateBtn" class="p-2 w-10 h-10 rounded-md bg-card border border-border text-primary hover:bg-secondary transition-colors">
                                <i class="fas fa-chevron-left text-sm"></i>
                            </button>
                            <div class="text-center cursor-pointer" id="date-display-trigger">
                                <p class="text-sm text-secondary">@currentCulture.TextInfo.ToTitleCase(currentCulture.DateTimeFormat.GetDayName(selectedDate.DayOfWeek))</p>
                                <p class="text-xl font-bold text-primary">@selectedDate.ToString("d MMMM yyyy", currentCulture)</p>
                            </div>
                            <button type="button" id="nextDateBtn" class="p-2 w-10 h-10 rounded-md bg-card border border-border text-primary hover:bg-secondary transition-colors">
                                <i class="fas fa-chevron-right text-sm"></i>
                            </button>
                        </div>
                        <div class="flex justify-start space-x-2 overflow-x-auto pb-2 px-2 hide-scrollbar date-strip-container">
                            @foreach (var date in datesToShow)
                            {
                                bool isSelected = date.Date == selectedDate.Date;
                                var dayAbbr = currentCulture.DateTimeFormat.GetAbbreviatedDayName(date.DayOfWeek).ToUpper();
                                <button type="button" class="date-strip-item flex-shrink-0 w-14 h-16 rounded-lg flex flex-col items-center justify-center transition-colors @(isSelected ? "selected shadow" : "")" data-date="@date.ToString("yyyy-MM-dd")">
                                    <span class="text-xs font-semibold opacity-75">@dayAbbr</span>
                                    <span class="text-lg font-bold">@date.Day</span>
                                </button>
                            }
                        </div>
                    </div>
                </div>

                <!-- Hidden Inputs -->
                <input type="hidden" asp-for="Date" id="Date" value="@Model.Date.ToString("yyyy-MM-dd")"/>
                <input type="hidden" asp-for="MealType" id="MealType" value="@(Model.MealType ?? Localizer["Breakfast"].ToString())" />

                <!-- Meal Type Toggle -->
                <div>
                    <label class="block text-sm font-medium text-primary mb-2">@Localizer["Meal"]</label>
                    <div class="grid grid-cols-2 gap-4">
                        <button type="button" id="breakfastBtn" class="btn meal-type-btn w-full flex flex-col items-center justify-center" data-meal-type="@Localizer["Breakfast"].ToString()">
                            <span class="block font-semibold">@Localizer["Breakfast"]</span>
                            <span class="block text-xs meal-subtitle mt-1">@Localizer["BreakfastHours"]</span>
                        </button>
                        <button type="button" id="dinnerBtn" class="btn meal-type-btn w-full flex flex-col items-center justify-center" data-meal-type="@Localizer["DinnerMenu"].ToString()">
                            <span class="block font-semibold">@Localizer["Dinner"]</span>
                            <span class="block text-xs meal-subtitle mt-1">@Localizer["DinnerHours"]</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>

        <!-- Error Message -->
        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="bg-error-bg border-l-4 border-error-border text-error-text p-4 rounded-lg mb-8" role="alert" id="errorAlert">
                <div class="flex justify-between items-center">
                    <span><strong>@Localizer["Error"]:</strong> @Model.ErrorMessage</span>
                    <button onclick="this.parentElement.parentElement.remove()" class="text-error-text hover:opacity-75">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        }

        <!-- Menu Display -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8 items-stretch">
            <!-- Sabah Menüsü Alanı -->
            <div class="flex flex-col h-full">
                @if (Model.BreakfastMenu != null)
                {
                    var breakfastModel = new MenuCardViewModel {
                        Menu = Model.BreakfastMenu,
                        Title = Localizer["BreakfastMenu"].ToString(),
                        IconClass = "fas fa-mug-hot",
                        GradientStart = "#FF8A65",
                        GradientEnd = "#FFCC02",
                        CategoryColor = "#FF8A65",
                        DateText = Model.Date.ToString("dd MMMM yyyy, dddd", currentCulture) + " - " + Model.Cities.FirstOrDefault(c => c.Value == Model.CityId.ToString())?.Text
                    };
                    <partial name="_MenuCard" model="breakfastModel" />
                }
                else
                {
                    var noMenuModel = new NoMenuCardViewModel {
                        MealLabel = Localizer["BreakfastMenu"].ToString(),
                        DateText = Model.Date.ToString("dd MMMM yyyy, dddd", currentCulture)
                    };
                    <partial name="_NoMenuCard" model="noMenuModel" />
                }
            </div>

            <!-- Akşam Menüsü Alanı -->
            <div class="flex flex-col h-full">
                @if (Model.DinnerMenu != null)
                {
                    var dinnerModel = new MenuCardViewModel {
                        Menu = Model.DinnerMenu,
                        Title = Localizer["DinnerMenu"].ToString(),
                        IconClass = "fas fa-utensils",
                        GradientStart = "#1E3A8A",
                        GradientEnd = "#3B82F6",
                        CategoryColor = "#1E3A8A",
                        DateText = Model.Date.ToString("dd MMMM yyyy, dddd", currentCulture) + " - " + Model.Cities.FirstOrDefault(c => c.Value == Model.CityId.ToString())?.Text
                    };
                    <partial name="_MenuCard" model="dinnerModel" />
                }
                else
                {
                    var noMenuModel = new NoMenuCardViewModel {
                        MealLabel = Localizer["DinnerMenu"].ToString(),
                        DateText = Model.Date.ToString("dd MMMM yyyy, dddd", currentCulture)
                    };
                    <partial name="_NoMenuCard" model="noMenuModel" />
                }
            </div>
        </div>

        <!-- Bilgilendirme Notu -->
        <div class="bg-card border border-border rounded-lg p-4 my-6 flex items-start gap-3 sm:gap-4">
            <div class="flex-shrink-0 pt-1">
                <i class="fas fa-info-circle text-accent"></i>
            </div>
            <div>
                <h4 class="font-semibold text-primary">@Localizer["ImportantInfo"]</h4>
                <p class="text-secondary text-sm mt-1">
                    @Localizer["InfoNote"]
                </p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://npmcdn.com/flatpickr/dist/l10n/tr.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.getElementById("menuForm");
            const dateInput = document.getElementById("Date");
            const mealTypeInput = document.getElementById("MealType");
            const breakfastBtn = document.getElementById("breakfastBtn");
            const dinnerBtn = document.getElementById("dinnerBtn");
            const formContainer = document.getElementById('menuForm');

            // Constants for meal types from Razor
            const breakfastType = "@Localizer["Breakfast"].ToString()";
            const dinnerType = "@Localizer["DinnerMenu"].ToString()"; // Corresponds to Akşam Yemeği

            // Scroll selected date into view
            const selectedDateElement = document.querySelector('.date-strip-item.selected');
            if (selectedDateElement) {
                selectedDateElement.scrollIntoView({ behavior: 'auto', inline: 'center', block: 'nearest' });
            }

            function submitWithDate(newDateStr) {
                const newDate = new Date(newDateStr);
                const today = new Date();
                
                newDate.setHours(0, 0, 0, 0);
                today.setHours(0, 0, 0, 0);

                if (newDate > today) {
                    return; // Prevent selecting future dates
                }

                dateInput.value = newDateStr;
                form.submit();
            }

            document.getElementById('prevDateBtn').addEventListener('click', function() {
                const currentDate = new Date(dateInput.value);
                currentDate.setDate(currentDate.getDate() - 1);
                submitWithDate(currentDate.toISOString().split('T')[0]);
            });

            document.getElementById('nextDateBtn').addEventListener('click', function() {
                const currentDate = new Date(dateInput.value);
                currentDate.setDate(currentDate.getDate() + 1);
                submitWithDate(currentDate.toISOString().split('T')[0]);
            });

            const dateStrip = document.querySelector('.hide-scrollbar');
            let isDragging = false; 

            if (dateStrip) {
                let isDown = false;
                let startX;
                let scrollLeft;
                
                dateStrip.addEventListener('mousedown', (e) => {
                    isDown = true;
                    isDragging = false; 
                    startX = e.pageX - dateStrip.offsetLeft;
                    scrollLeft = dateStrip.scrollLeft;
                });
                
                dateStrip.addEventListener('mousemove', (e) => {
                    if(!isDown) return;
                    e.preventDefault();
                    isDragging = true;
                    dateStrip.classList.add('grabbing');
                    const x = e.pageX - dateStrip.offsetLeft;
                    const walk = (x - startX) * 2; 
                    dateStrip.scrollLeft = scrollLeft - walk;
                });
                
                window.addEventListener('mouseup', () => {
                    isDown = false;
                    dateStrip.classList.remove('grabbing');
                });
                
                document.querySelectorAll('.date-strip-item').forEach(button => {
                    button.addEventListener('click', function(e) {
                        if (isDragging) {
                            e.preventDefault();
                            return;
                        }
                        submitWithDate(this.dataset.date);
                    });
                });
            }

            function updateButtonStyles() {
                const currentMealType = mealTypeInput.value;
                formContainer.dataset.mealTheme = currentMealType === breakfastType ? 'morning' : 'evening';
                
                [breakfastBtn, dinnerBtn].forEach(btn => {
                    btn.classList.remove('btn-primary', 'btn-outline');
                    if (btn.dataset.mealType === currentMealType) {
                        btn.classList.add('btn-primary');
                    } else {
                        btn.classList.add('btn-outline');
                    }
                });
            }

            [breakfastBtn, dinnerBtn].forEach(button => {
                button.addEventListener('click', function() {
                    mealTypeInput.value = this.dataset.mealType;
                    updateButtonStyles();
                    form.submit();
                });
            });
            
            document.getElementById('CityId').addEventListener('change', function() {
                form.submit();
            });

            updateButtonStyles();
        });
    </script>
}